// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async calcX(v0: number, alpha: number, t: number): Promise<number> {
    return await TAURI_INVOKE("calc_x", { v0, alpha, t });
  },
  async calcY(
    v0: number,
    alpha: number,
    t: number,
    g: number,
  ): Promise<number> {
    return await TAURI_INVOKE("calc_y", { v0, alpha, t, g });
  },
  async monkeyY(h: number, g: number, time: number): Promise<number> {
    return await TAURI_INVOKE("monkey_y", { h, g, time });
  },
  async calcTime(xM: number, v0: number, alpha: number): Promise<number> {
    return await TAURI_INVOKE("calc_time", { xM, v0, alpha });
  },
  async atan2(y: number, x: number): Promise<number> {
    return await TAURI_INVOKE("atan2", { y, x });
  },
  async currentDardoSpeed(
    v0: number,
    alpha: number,
    t: number,
    g: number,
  ): Promise<number> {
    return await TAURI_INVOKE("current_dardo_speed", { v0, alpha, t, g });
  },
  async currentMonoSpeed(v0: number, g: number, t: number): Promise<number> {
    return await TAURI_INVOKE("current_mono_speed", { v0, g, t });
  },
  async angleToRadians(angle: number): Promise<number> {
    return await TAURI_INVOKE("angle_to_radians", { angle });
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
